/**
    ///Fotos64
    **/
    public static class fotosCode
    {
        public static int REQUEST_IMAGE_CAPTURE = 100;
        public static int RESULT_LOAD_IMG = 200;
    }
    public static Uri imageToUploadUri;
    public static void OpenDialog(final Activity activity)
    {AlertDialog.Builder builder = new AlertDialog.Builder(activity);
        builder.setMessage("Deseja pegar a foto da Camera ou da Galeria?").setTitle("Pegue a foto");
        builder.setNegativeButton("Camera", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                File f = new File(Environment.getExternalStorageDirectory(), "POST_IMAGE.jpg");
                imageToUploadUri = Uri.fromFile(f);
                Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                if (takePictureIntent.resolveActivity(activity.getPackageManager()) != null) {
                    activity.startActivityForResult(takePictureIntent, fotosCode.REQUEST_IMAGE_CAPTURE);
                }
            }
        });
        builder.setPositiveButton("Galeria", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                Intent intent = new Intent(Intent.ACTION_PICK);
                intent.setType("image/*");
                activity.startActivityForResult(intent, fotosCode.RESULT_LOAD_IMG);
            }
        });
        final AlertDialog alertDialog = builder.create();
        alertDialog.setOnShowListener(new DialogInterface.OnShowListener() {
            @Override
            public void onShow(DialogInterface dialogInterface) {
                alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(Color.rgb(0,0,0));
                alertDialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(Color.rgb(0,0,0));
            }
        });
        alertDialog.show();
    }
    public static String encodeToBase64(Bitmap image, Bitmap.CompressFormat compressFormat)
    {
        ByteArrayOutputStream byteArrayOS = new ByteArrayOutputStream();
        image.compress(compressFormat, 20, byteArrayOS);
        return Base64.encodeToString(byteArrayOS.toByteArray(), Base64.DEFAULT);
    }
    public static Bitmap decodeBase64(String input)
    {
        byte[] decodedBytes = Base64.decode(input, 0);
        return BitmapFactory.decodeByteArray(decodedBytes, 0, decodedBytes.length);
    }
    public static Bitmap decodeUri(Uri uri, int requiredSize, Activity activity)
            throws FileNotFoundException {
        BitmapFactory.Options o = new BitmapFactory.Options();
        o.inJustDecodeBounds = true;
        BitmapFactory.decodeStream(activity.getContentResolver().openInputStream(uri), null, o);

        int width_tmp = o.outWidth
                , height_tmp = o.outHeight;
        int scale = 1;

        while(true) {
            if(width_tmp / 2 < requiredSize || height_tmp / 2 < requiredSize)
                break;
            width_tmp /= 2;
            height_tmp /= 2;
            scale *= 2;
        }

        BitmapFactory.Options o2 = new BitmapFactory.Options();
        o2.inSampleSize = scale;
        return BitmapFactory.decodeStream(activity.getContentResolver().openInputStream(uri), null, o2);
    }
    
    
    
    
    @Override
    public void onActivityResult(int reqCode, int resultCode, Intent data) {
        super.onActivityResult(reqCode, resultCode, data);
        if (resultCode == RESULT_OK && reqCode == StaticFunction.fotosCode.RESULT_LOAD_IMG) {
            try {
                Uri imageUri = data.getData();
                Bitmap selectedImage = StaticFunction.decodeUri(imageUri, 150, cadastroActivity);
                String base64 = StaticFunction.encodeToBase64(selectedImage, Bitmap.CompressFormat.JPEG);
                StaticFunction.driver.setFoto(base64);
                System.gc();
                imgFoto.setImageBitmap(selectedImage);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                Toast.makeText(this, "Erro ao pegar a foto.", Toast.LENGTH_LONG).show();
            }
        } else if (resultCode == RESULT_OK && reqCode == StaticFunction.fotosCode.REQUEST_IMAGE_CAPTURE) {
            Bundle extras = data.getExtras();
            Bitmap imageBitmap = (Bitmap) extras.get("data");
            String base64 = StaticFunction.encodeToBase64(imageBitmap, Bitmap.CompressFormat.JPEG);
            StaticFunction.driver.setFoto(base64);
            System.gc();
            imgFoto.setImageBitmap(imageBitmap);
        } else {
            Toast.makeText(this, "Você não selecionou uma foto.", Toast.LENGTH_LONG).show();
        }
        System.gc();
    }
    
    
